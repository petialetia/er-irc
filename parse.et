str;
mul;
maybe;

export {

    # It would have been better use make a trait
    # Something like "Parsed":
    # type Parsed = trait {
    #     of Str -> Self fun parse str;
    # };

    of Str -> Int
    fun parse_num str;

    of Str -> struct { val: Int, len: Int }
    fun parse_num_with_len str;
    # Parses the decimal string into an integer

    of Str -> Str
    fun parse_word str;

    of Str -> Maybe(Str)
    fun maybe_parse_word str;

}

of String -> Bool
fun is_digit char = {
    of Int var val = (*char) ~> _;
    within_bounds(val, '0' ~> _, '9' ~> _)
};

of Int -> Int -> Int -> Bool
fun within_bounds val left right = if val >= left
        val <= right
    else
        false
    ;


of String -> Int
fun parse_digit char = {
    var val = (*char) ~> _;
    var min_ascii_num = '0' ~> Int;

    val - min_ascii_num
};


fun parse_num_with_len str = parse_num_inner(str.data, 0, 0);


fun parse_num str = parse_num_inner(str.data, 0, 0).val;


fun parse_num_inner str acc len = if is_digit(str) {
        var new_acc = mul(10, acc) + parse_digit(str);
        parse_num_inner(str + 1, new_acc, len + 1)
    } else
        { .val = acc, .len = len }
    ;


of String -> Bool
fun is_alpha char = {
    of Int var val = (*char) ~> _;

    if within_bounds(val, 'a' ~> _, 'z' ~> _)
        true
    else
        within_bounds(val, 'A' ~> _, 'Z' ~> _)
};


fun is_alnum char = if is_digit(char)
        true
    else
        is_alpha(char)
    ;


fun maybe_parse_word str = {
    var result = parse_word(str);
    if result.size == 0 then
        .none
    else
        .some result
};


fun parse_word str = {
    of Str var word = { .data = str.data, .size = 0 };
    parse_word_inner(str.data, &word);
    word
};


fun parse_word_inner str word = if is_alnum(str) {
        word->size = word->size + 1;
        parse_word_inner(str + 1, word);
    };
